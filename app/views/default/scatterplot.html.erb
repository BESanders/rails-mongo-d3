<% content_for :head do %>
<% end %>
<div class="container">
  <div class="row">
    <br>
    <p style="max-width: 700px;">Below you will find a scatterplot of coordinates powered by D3. The data
    for this scatterplot is pulled from a MongoDB instance. You can choose to
    add a new point to the plot and it will be stored in the database aswell. 
    Alternatively, you may choose to clear the scatterplot, which will likewise
    destroy all points stored in the database. The purpose of this app is to
    briefly demonstrate persisting data to MongoDB from Rails and throwing in
    a little D3 for fun :)</p>
  </div>
  <div class="row">
    <div class="span12 svg-placeholder">
    </div>
  </div>
  <!--
  <div class="row">
    <div class="dropdown span12">
      <button type="button" class="btn btn-primary dropdown-toggle"
              data-toggle="dropdown" >
        Dataset Size
      <span class="caret"></span>
      </button>
      <ul class="dropdown-menu">
        <li><a href="#">10%</a></li>
        <li><a href="#">50%</a></li>
        <li><a href="#">75%</a></li>
        <li><a href="#">50%</a></li>
      </ul>
    </div>
  </div>
  -->
  <div class="row">
      <form method="POST" action="" role="form" class="form-inline">
        <div class="form-group">
          <label  for="perc">Add Point</label>
            <input type="number" class="form-control" name="x" id="x" placeholder="x">
            <input type="number" class="form-control" name="y" id="y" placeholder="y">
            <button type="submit" name="b1" value="add" class="btn btn-primary">Add</button>
            <button type="submit" name="b2" value="clear" class="btn btn-primary">Remove All</button>
        </div>
      </form>
  </div>
</div>
<script type="text/javascript">
  var xValue = function(d) { return d.value },
      xScale = d3.scale.linear().range([0, 500]),
      xMap = function(d) { return xScale(xValue(d)) },
      xAxis = d3.svg.axis().scale(xScale).orient("bottom");
  
  var yValue = function(d) { return d.freq },
      yScale = d3.scale.linear().range([500, 10]),
      yMap = function(d) { return yScale(yValue(d)) },
      yAxis = d3.svg.axis().scale(yScale).orient("left");
  
  var svg = d3.select(".svg-placeholder").append("svg")
              .attr("class", "col-md4")
              .attr("width", 600)
              .attr("height", 600)
            .append("g")
              .attr("transform", "translate(45, 10)");
  
  
  var data = <%= raw @data %>

  xScale.domain([parseFloat(d3.min(data, xValue))-1, parseFloat(d3.max(data, xValue))+1]);
  yScale.domain([parseFloat(d3.min(data, yValue))-1, parseFloat(d3.max(data, yValue))+1]);

  svg.append("g")
      .attr("class", "axis")
      .attr("transform", "translate(0,500)")
      .attr("opacity", 0)
    .call(xAxis)
    .transition()
      .duration(500)
      .attr("opacity", 100)
  
  svg.append("g")
      .attr("class", "axis")
      .attr("transform", "translate(0,0)")
      .attr("opacity", 0)
    .call(yAxis)
    .transition()
      .duration(500)
      .attr("opacity", 100)
  
  svg.selectAll(".dot")
    .data(data)
    .enter()
    .append("circle")
      .attr("class", "dot")
      .attr("r", .5)
      .attr("cx", xMap)
      .attr("cy", yMap)
      .attr("opacity", 0)
    .transition()
      .duration(500)
      .attr("opacity", 100)
      .attr("r", 3)
  
  // var table = d3.select("body").append("table");
  // var tr = table.selectAll("tr")
  //               .data(data)
  //               .enter()
  //               .append("tr");
  // tr.append("td").html(function (elem) { return elem['value'] })
  // tr.append("td").html(function (elem) { return elem['freq'] })
</script>

